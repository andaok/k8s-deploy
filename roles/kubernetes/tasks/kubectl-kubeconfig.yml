---

- name: "Upload admin csrfiles"
  copy:
    src: admin-csr.json
    dest: /opt/ssl/admin-csr.json
  when: "inventory_hostname == groups['masters'][0]"


- name: "Create admin CA"
  shell: "cfssl gencert -ca=/etc/kubernetes/ssl/ca.pem \
  -ca-key=/etc/kubernetes/ssl/ca-key.pem \
  -config=/opt/ssl/config.json \
  -profile=kubernetes admin-csr.json | cfssljson -bare admin"
  args:
    chdir: /opt/ssl/
  delegate_to: "{{ groups['masters'][0] }}"
  when: "inventory_hostname == groups['masters'][0]"


- name: "Upload admin pem file"
  synchronize: src=/opt/ssl/{{ item }} dest=/etc/kubernetes/ssl/
  with_items:
    - admin-key.pem
    - admin.pem
  delegate_to: "{{ groups['masters'][0] }}"
  when: "'masters' in group_names"

- name: "Create kubeconfig file step 1"
  shell: "kubectl config set-cluster kubernetes \
  --certificate-authority=/etc/kubernetes/ssl/ca.pem \
  --embed-certs=true \
  --server=https://{{ inventory_hostname }}:6443"
  when: "'masters' in group_names"

- name: "Create kubeconfig file step 2"
  shell: "kubectl config set-credentials admin \
  --client-certificate=/etc/kubernetes/ssl/admin.pem \
  --embed-certs=true \
  --client-key=/etc/kubernetes/ssl/admin-key.pem"
  when: "'masters' in group_names"

- name: "Create kubeconfig file step 3"
  shell: "kubectl config set-context kubernetes \
  --cluster=kubernetes \
  --user=admin"
  when: "'masters' in group_names"

- name: "Create kubeconfig file step 4"
  shell: "kubectl config use-context kubernetes"
  when: "'masters' in group_names"
